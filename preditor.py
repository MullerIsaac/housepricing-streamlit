import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Interface do usu√°rio
st.set_page_config(page_title="Boston House Price Predictor", page_icon="üè†")

st.title("üè† Preditor de Pre√ßos de casas")
st.write("### Insira as caracter√≠sticas da regi√£o para prever o pre√ßo de uma casa")

# Carregar os dados
@st.cache_data
def load_data():
    column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
    data = pd.read_csv('boston_house.csv')
    return data

data = load_data()

# Separar as features e o alvo
X = data.drop('MEDV', axis=1)
y = data['MEDV']

# Pipeline de pr√©-processamento
numeric_features = X.columns
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

preprocessor = Pipeline(steps=[
    ('num', numeric_transformer)
])

model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', LinearRegression())])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
model.fit(X_train, y_train)

# Fazer predi√ß√µes no conjunto de teste
y_pred = model.predict(X_test)

# Calcular m√©tricas de avalia√ß√£o
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Sidebar: inputs do usu√°rio
st.sidebar.header("Caracter√≠sticas das Casas")
num_columns = 2  # Ajuste o n√∫mero de colunas conforme necess√°rio
input_columns = st.sidebar.columns(num_columns)

features = {}
for i, col in enumerate(X.columns):
    current_column = input_columns[i % num_columns]
    if col == 'CHAS':
        features[col] = current_column.selectbox(col, [0, 1])
    elif col == 'RAD':
        features[col] = current_column.slider(col, 0, 10, step=1)
    else:
        features[col] = current_column.number_input(col, value=float(X[col].mean()))

# Converter inputs para DataFrame
input_data = pd.DataFrame([features])

# Prever o pre√ßo
if st.sidebar.button("Prever"):
    prediction = model.predict(input_data)
    st.sidebar.success(f"Pre√ßo previsto: ${prediction[0]*1000:,.2f}")  # Multiplicar por 1000 para converter de milhares para d√≥lares

# √Årea principal: sumariza√ß√£o dos dados de aprendizado de m√°quina
st.write("### Sumariza√ß√£o do Modelo de Aprendizado de M√°quina")
st.write("#### M√©tricas de Avalia√ß√£o")
st.write(f"- Mean Squared Error (MSE): {mse:.2f}")
st.write(f"- R-squared (R2): {r2:.2f}")

# Exibir um sum√°rio dos dados
st.write("### Resumo dos dados utilizados:")
st.write(data.head())

# Se√ß√£o final: explica√ß√£o do dataset
st.write("### Sobre o Dataset Boston Housing")
st.markdown("""
O dataset **Boston Housing** √© amplamente utilizado para testar algoritmos de regress√£o. Ele cont√©m 506 amostras e 13 features, al√©m da vari√°vel alvo que representa o valor mediano das casas ocupadas pelos propriet√°rios em milhares de d√≥lares.

#### Features
- **CRIM**: Taxa de criminalidade per capita por cidade.
- **ZN**: Propor√ß√£o de terrenos residenciais zoneados para lotes acima de 25.000 p√©s quadrados.
- **INDUS**: Propor√ß√£o de acres de neg√≥cios n√£o varejistas por cidade.
- **CHAS**: Vari√°vel dummy Charles River (1 se o terreno faz fronteira com o rio; 0 caso contr√°rio).
- **NOX**: Concentra√ß√£o de √≥xidos n√≠tricos (partes por 10 milh√µes).
- **RM**: N√∫mero m√©dio de quartos por habita√ß√£o.
- **AGE**: Propor√ß√£o de unidades ocupadas pelos propriet√°rios constru√≠das antes de 1940.
- **DIS**: Dist√¢ncias ponderadas at√© cinco centros de emprego de Boston.
- **RAD**: √çndice de acessibilidade √†s rodovias radiais.
- **TAX**: Taxa de imposto sobre a propriedade de valor total por $10.000.
- **PTRATIO**: Raz√£o aluno-professor por cidade.
- **B**: 1000(Bk - 0.63)^2 onde Bk √© a propor√ß√£o de pessoas de ascend√™ncia afro-americana por cidade.
- **LSTAT**: Porcentagem da popula√ß√£o de status socioecon√¥mico mais baixo.
- **MEDV**: Valor mediano das casas ocupadas pelos propriet√°rios (em milhares de d√≥lares).

#### Fonte
O dataset foi retirado do reposit√≥rio de aprendizado de m√°quina UCI e pode ser acessado atrav√©s da biblioteca `sklearn` no Python.
""")
